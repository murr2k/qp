import { StateMachine, State, Transition, GeneratorOptions, GeneratedCode } from '../types/stateMachine';

export class QpCodeGenerator {
    private stateMachine!: StateMachine;
    private options!: GeneratorOptions;
    private indent: string = '    ';

    generate(stateMachine: StateMachine, options: GeneratorOptions): GeneratedCode {
        this.stateMachine = stateMachine;
        this.options = options;

        return {
            header: this.generateHeader(),
            source: this.generateSource()
        };
    }

    private generateHeader(): string {
        const guard = `${this.stateMachine.name.toUpperCase()}_H`;
        const lines: string[] = [];

        if (this.options.includeComments) {
            lines.push('/*');
            lines.push(` * ${this.stateMachine.name}.h`);
            lines.push(' * Generated by QP Mermaid Extension');
            lines.push(' */');
            lines.push('');
        }

        lines.push(`#ifndef ${guard}`);
        lines.push(`#define ${guard}`);
        lines.push('');
        lines.push('#include "qpc.h"');
        lines.push('');

        // Generate event signals enum
        lines.push('enum {');
        for (const event of this.stateMachine.events) {
            lines.push(`${this.indent}${event.name} = ${event.value},`);
        }
        lines.push('};');
        lines.push('');

        // Generate active object structure
        lines.push(`typedef struct {`);
        lines.push(`${this.indent}${this.stateMachine.type} super;`);
        lines.push('');
        
        if (this.options.includeComments && this.stateMachine.dataMembers.length > 0) {
            lines.push(`${this.indent}/* private data */`);
        }
        
        for (const member of this.stateMachine.dataMembers) {
            const comment = member.comment ? ` /* ${member.comment} */` : '';
            lines.push(`${this.indent}${member.type} ${member.name};${comment}`);
        }
        
        lines.push(`} ${this.stateMachine.name};`);
        lines.push('');

        // Constructor
        lines.push(`void ${this.stateMachine.name}_ctor(${this.stateMachine.name} * const me);`);
        lines.push('');

        // Active object operations
        if (this.stateMachine.type === 'QActive') {
            lines.push(`extern QActive * const AO_${this.stateMachine.name};`);
        }

        lines.push('');
        lines.push(`#endif /* ${guard} */`);

        return lines.join('\n');
    }

    private generateSource(): string {
        const lines: string[] = [];

        if (this.options.includeComments) {
            lines.push('/*');
            lines.push(` * ${this.stateMachine.name}.c`);
            lines.push(' * Generated by QP Mermaid Extension');
            lines.push(' */');
            lines.push('');
        }

        lines.push(`#include "qpc.h"`);
        lines.push(`#include "${this.stateMachine.name}.h"`);
        lines.push(`#include "bsp.h"`);
        lines.push('');

        // Forward declarations
        lines.push('/* State handler declarations */');
        const allStates = this.getAllStates();
        for (const state of allStates) {
            lines.push(`static QState ${this.stateMachine.name}_${state.name}(${this.stateMachine.name} * const me, QEvt const * const e);`);
        }
        lines.push('');

        // Global pointer
        if (this.stateMachine.type === 'QActive') {
            lines.push(`/* Global pointer to the ${this.stateMachine.name} active object */`);
            lines.push(`QActive * const AO_${this.stateMachine.name} = &l_${this.stateMachine.name.toLowerCase()}.super;`);
            lines.push('');
        }

        // Local instance
        lines.push(`/* Local instance */`);
        lines.push(`static ${this.stateMachine.name} l_${this.stateMachine.name.toLowerCase()};`);
        lines.push('');

        // Constructor
        lines.push(`void ${this.stateMachine.name}_ctor(${this.stateMachine.name} * const me) {`);
        lines.push(`${this.indent}${this.stateMachine.type}_ctor(&me->super, Q_STATE_CAST(&${this.stateMachine.name}_initial));`);
        
        // Initialize data members
        for (const member of this.stateMachine.dataMembers) {
            if (member.type === 'QTimeEvt') {
                lines.push(`${this.indent}QTimeEvt_ctorX(&me->${member.name}, &me->super, TIMEOUT_SIG, 0U);`);
            }
        }
        
        lines.push('}');
        lines.push('');

        // Initial transition
        lines.push(`/* Initial transition */`);
        lines.push(`static QState ${this.stateMachine.name}_initial(${this.stateMachine.name} * const me, QEvt const * const e) {`);
        lines.push(`${this.indent}(void)e; /* avoid compiler warning */`);
        
        if (this.options.includeComments) {
            lines.push(`${this.indent}/* Initialize hardware, subscribe to events, etc. */`);
        }
        
        lines.push(`${this.indent}return Q_TRAN(&${this.stateMachine.name}_${this.stateMachine.initialState});`);
        lines.push('}');
        lines.push('');

        // State handlers
        for (const state of allStates) {
            lines.push(...this.generateStateHandler(state));
            lines.push('');
        }

        return lines.join('\n');
    }

    private generateStateHandler(state: State): string[] {
        const lines: string[] = [];
        
        lines.push(`/* State handler for ${state.name} */`);
        lines.push(`static QState ${this.stateMachine.name}_${state.name}(${this.stateMachine.name} * const me, QEvt const * const e) {`);
        lines.push(`${this.indent}QState status_;`);
        lines.push(`${this.indent}switch (e->sig) {`);

        // Entry actions
        if (state.entryActions.length > 0) {
            lines.push(`${this.indent}${this.indent}case Q_ENTRY_SIG: {`);
            for (const action of state.entryActions) {
                lines.push(`${this.indent}${this.indent}${this.indent}${action};`);
            }
            lines.push(`${this.indent}${this.indent}${this.indent}status_ = Q_HANDLED();`);
            lines.push(`${this.indent}${this.indent}${this.indent}break;`);
            lines.push(`${this.indent}${this.indent}}`);
        }

        // Exit actions
        if (state.exitActions.length > 0) {
            lines.push(`${this.indent}${this.indent}case Q_EXIT_SIG: {`);
            for (const action of state.exitActions) {
                lines.push(`${this.indent}${this.indent}${this.indent}${action};`);
            }
            lines.push(`${this.indent}${this.indent}${this.indent}status_ = Q_HANDLED();`);
            lines.push(`${this.indent}${this.indent}${this.indent}break;`);
            lines.push(`${this.indent}${this.indent}}`);
        }

        // Initial transition for composite states
        if (state.children.length > 0 && state.initialTransition) {
            lines.push(`${this.indent}${this.indent}case Q_INIT_SIG: {`);
            lines.push(`${this.indent}${this.indent}${this.indent}status_ = Q_TRAN(&${this.stateMachine.name}_${state.initialTransition.target});`);
            lines.push(`${this.indent}${this.indent}${this.indent}break;`);
            lines.push(`${this.indent}${this.indent}}`);
        }

        // Event transitions
        for (const transition of state.transitions) {
            if (!transition.isInternal) {
                lines.push(`${this.indent}${this.indent}case ${transition.event}: {`);
                
                if (transition.guard) {
                    lines.push(`${this.indent}${this.indent}${this.indent}if (${transition.guard}) {`);
                    if (transition.action) {
                        lines.push(`${this.indent}${this.indent}${this.indent}${this.indent}${transition.action};`);
                    }
                    lines.push(`${this.indent}${this.indent}${this.indent}${this.indent}status_ = Q_TRAN(&${this.stateMachine.name}_${transition.target});`);
                    lines.push(`${this.indent}${this.indent}${this.indent}} else {`);
                    lines.push(`${this.indent}${this.indent}${this.indent}${this.indent}status_ = Q_UNHANDLED();`);
                    lines.push(`${this.indent}${this.indent}${this.indent}}`);
                } else {
                    if (transition.action) {
                        lines.push(`${this.indent}${this.indent}${this.indent}${transition.action};`);
                    }
                    lines.push(`${this.indent}${this.indent}${this.indent}status_ = Q_TRAN(&${this.stateMachine.name}_${transition.target});`);
                }
                
                lines.push(`${this.indent}${this.indent}${this.indent}break;`);
                lines.push(`${this.indent}${this.indent}}`);
            } else {
                // Internal transition
                lines.push(`${this.indent}${this.indent}case ${transition.event}: {`);
                if (transition.action) {
                    lines.push(`${this.indent}${this.indent}${this.indent}${transition.action};`);
                }
                lines.push(`${this.indent}${this.indent}${this.indent}status_ = Q_HANDLED();`);
                lines.push(`${this.indent}${this.indent}${this.indent}break;`);
                lines.push(`${this.indent}${this.indent}}`);
            }
        }

        // Default case
        lines.push(`${this.indent}${this.indent}default: {`);
        if (state.parent) {
            lines.push(`${this.indent}${this.indent}${this.indent}status_ = Q_SUPER(&${this.stateMachine.name}_${state.parent});`);
        } else {
            lines.push(`${this.indent}${this.indent}${this.indent}status_ = Q_SUPER(&QHsm_top);`);
        }
        lines.push(`${this.indent}${this.indent}${this.indent}break;`);
        lines.push(`${this.indent}${this.indent}}`);

        lines.push(`${this.indent}}`);
        lines.push(`${this.indent}return status_;`);
        lines.push('}');

        return lines;
    }

    private getAllStates(): State[] {
        const states: State[] = [];
        
        const collectStates = (stateList: State[]) => {
            for (const state of stateList) {
                states.push(state);
                if (state.children.length > 0) {
                    collectStates(state.children);
                }
            }
        };
        
        collectStates(this.stateMachine.states);
        return states;
    }
}